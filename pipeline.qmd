---
title: "Model pipeline"
output: html_document
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(collapse = TRUE,
                      comment = "#>",
                      tar_interactive = interactive())
library(targets)
tar_unscript()
```

## Intro

We use the [{targets}](https://books.ropensci.org/targets/) package to manage
the code pipeline used for running the model.

See [setup](setup.qmd) for more info.

In addition to the targets package itself we make use of two targets-related
packages: [tarchetypes](https://docs.ropensci.org/tarchetypes/index.html) and
[stantargets](https://docs.ropensci.org/stantargets/index.html).

```{r}
library(targets)
library(tarchetypes)
library(stantargets)
```

## Globals

We first define some global options/functions common to all targets. The function below plots a histogram of ozone concentrations, and our histogram target will need it.

```{targets example-globals, tar_globals = TRUE}
library(targets)
library(tarchetypes)
library(stantargets)
options(tidyverse.quiet = TRUE)
tar_source() # grab all functions in R folder
tar_option_set(packages = c(
  "readr",
  "tidyr",
  "rvest",
  "glue",
  "dplyr",
  "stringr",
  "lubridate",
  "forcats"
))
```

## Targets


```{targets urls}
list(
  tar_url(polls2011_url, wikipedia_poll_url(2011)),
  tar_url(polls2014_url, wikipedia_poll_url(2014)),
  tar_url(polls2017_url, wikipedia_poll_url(2017)),
  tar_url(polls2020_url, wikipedia_poll_url(2020)),
  tar_url(polls2023_url, wikipedia_poll_url(2023)),
  tar_url(results2008_url, election_results_summary(2008)),
  tar_url(results2011_url, election_results_summary(2011)),
  tar_url(results2014_url, election_results_summary(2014)),
  tar_url(results2017_url, election_results_summary(2017)),
  tar_url(results2020_url, election_results_summary(2020))
)
```




```{targets polls}
list(
  tar_target(polls2011, extract_poll_results_2011(polls2011_url)),
  tar_target(polls2014, extract_poll_results_2014(polls2014_url)),
  tar_target(polls2017, extract_poll_results_2017(polls2017_url)),
  tar_target(polls2020, extract_poll_results_2020(polls2020_url)),
  tar_target(polls2023, extract_poll_results_2023(polls2023_url)),
  tar_target(polls, combine_polls(polls2011,polls2014,polls2017,polls2020,polls2023))
)
```

```{targets results}
list(
  tar_target(results2020, fetch_results(results2020_url, 17, 2020)),
  tar_target(results2017, fetch_results(results2017_url, 16, 2017)),
  tar_target(results2014, fetch_results(results2014_url, 15, 2014)),
  tar_target(results2011, fetch_results(results2011_url, 13, 2011)),
  tar_target(results2008, fetch_results(results2008_url, 19, 2008)),
  tar_target(
    results,
    combine_results(
      results2008,
      results2011,
      results2014,
      results2017,
      results2020
    )
  )
  
)
```

### Selecting parties and pollsters

Only include pollsters who have provided a poll for the 2023 election. (Not sure
how the model will handle only having Curia polls after the 2020 election - may
need to remove it and consider adding leaked Curia polls - or talking to Curia.)

Include parties who currently have a seat in parliament or who have polled over
2.5% three times (might have to increase this if model won't converge).

```{targets params}
list(
  tar_target(pollsters, polls |> 
               filter(Election == 2023) |> 
               distinct(Pollster)),
  tar_target(parties_in_parliament, 
             tibble(Party = c('ACT', 'Green', 'Labour', 'National', 'Te Pāti Māori'))),
  tar_target(parties,  polls |> 
               filter(Election == 2023, VotingIntention > 0.025) |>
               filter(n() > 3, .by=Party) |> 
               distinct(Party) |> 
               union(parties_in_parliament) |> 
               arrange(Party)),
  tar_target(pollsters2020, polls |> 
               filter(Election == 2020,
                      Pollster != 'YouGov') |> # Only one YouGov poll 
               distinct(Pollster)),
  tar_target(parties_in_parliament2020, 
             tibble(Party = c('ACT', 'Green', 'Labour', 'National', 'NZ First'))),
  tar_target(parties2020,  polls |> 
               filter(Election == 2020, VotingIntention > 0.025) |>
               filter(n() > 3, .by=Party) |> 
               distinct(Party) |> 
               union(parties_in_parliament2020))
)
```

```{targets prep}
list(
  tar_target(ThisElection, "2023-10-14"),
  tar_target(election_dates, as.Date(
    c("2014-09-20", "2017-09-23", "2020-10-17", ThisElection)
  )),
  tar_target(days_between_elections, as.integer(diff(election_dates)) + 1),
  tar_target(
    elections,
    results |>
      filter(Election >= 2014) |>
      mutate(
        Party = fct_other(Party, keep = parties$Party) |>
          fct_relevel(parties$Party)
      ) |>
      count(Party, Election, wt = Percentage, name = 'Percentage') |>
      arrange(Party, Election) |>
      pivot_wider(names_from = Party, values_from = Percentage, values_fill = 0) |>
      select(-Election)
  ),
  tar_target(
    polls2,
    polls |>
  filter(Pollster %in% c(pollsters$Pollster), !is.na(MidPoint)) |>
  mutate(
    Party = fct_other(Party, keep = parties$Party) |>
      fct_relevel(parties$Party)
  ) |>
  filter(Party != 'Other') |> 
  mutate(Polled = sum(VotingIntention), .by = c(Pollster, MidPoint)) |> 
  rename(MidDate = MidPoint, ElectionYear = Election) |>
  count(
    Party,
    Pollster,
    MidDate,
    ElectionYear,
    Polled,
    wt = VotingIntention,
    name = "VotingIntention"
  ) |>
  filter(ElectionYear %in% year(election_dates[-1])) |>
  arrange(Party, MidDate) |>
  pivot_wider(
    names_from = Party,
    values_from = VotingIntention,
    names_sort = TRUE,
    values_fill = 0
  ) |>
  # days since the first election in our model:
  mutate(Other = max(0, 1 - Polled),
         MidDateNumber = 1 + as.numeric(MidDate - election_dates[1])) |> 
  select(-Polled)

  ),
  tar_target(
    polls3,
    polls2 |>
      arrange(Pollster, MidDate) |>
      group_split(Pollster)
  ),
  tar_target(parties_ss, names(elections)),
  tar_target(
    # estimate the standard errors.  Note we are pretending they all have a sample size of 1000 -
    # which the main five do, but not some of the smaller ones.  Improvement would be to better deal with this.
    
    all_ses,
    polls2 |>
      select(Pollster, ACT:Other) |>
      pivot_longer(ACT:Other, names_to = 'Party', values_to = 'p') |>
      summarise(
        p = mean(p, na.rm = T),
        se = sqrt(p * (1 - p) / 1000),
        .by = c(Pollster, Party)
      )
  ),
  tar_target(
    ses3,
    all_ses |>
      arrange(Pollster, Party) |>
      group_split(Pollster)
  ),
  tar_target(
    d1, list(mu_elect1 = as.numeric(elections[1, ]), 
           mu_elect2 = as.numeric(elections[2, ]),
           mu_elect3 = as.numeric(elections[3, ]), 

           n_parties = length(parties_ss),
           n_days = days_between_elections, 
           # multiply the variance of all polls by 2.  See my blog post of 9 July 2017.
           inflator = sqrt(2),
           
           y1_n = nrow(polls3[[1]]),
           y1_values = polls3[[1]][ , 4:11],
           y1_days = as.numeric(polls3[[1]]$MidDateNumber),
           y1_se = ses3[[1]]$se,
           
           y2_n = nrow(polls3[[2]]),
           y2_values = polls3[[2]][ , 4:11],
           y2_days = as.numeric(polls3[[2]]$MidDateNumber),
           y2_se = ses3[[2]]$se,
           
           y3_n = nrow(polls3[[3]]),
           y3_values = polls3[[3]][ , 4:11],
           y3_days = as.numeric(polls3[[3]]$MidDateNumber),
           y3_se = ses3[[3]]$se,
           
           y4_n = nrow(polls3[[4]]),
           y4_values = polls3[[4]][ , 4:11],
           y4_days = as.numeric(polls3[[4]]$MidDateNumber),
           y4_se = ses3[[4]]$se,
           
           y5_n = nrow(polls3[[5]]),
           y5_values = polls3[[5]][ , 4:11],
           y5_days = as.numeric(polls3[[5]]$MidDateNumber),
           y5_se = ses3[[5]]$se,
           # next row is a dummy variable specially for Reid Research's change in methodology:
           
           y6_n = nrow(polls3[[6]]),
           y6_values = polls3[[6]][ , 4:11],
           y6_days = as.numeric(polls3[[6]]$MidDateNumber),
           y6_se = ses3[[6]]$se,
           reid_method = as.numeric(polls3[[6]]$MidDate >= as.Date("2017-01-01")),
           
           n_pollsters = 6)
  )
)

```


```{targets modelling}
list(
  tar_stan_mcmc(
    model2023,
    "stan/model2023.stan",
    dir = ".stan",
    data = d1,
    chains = 4,
    parallel_chains = 4,
    iter_warmup = 50,
    iter_sampling = 20,
    max_treedepth = 10,
    deployment = "worker"
  )
)
```


